#!/bin/bash

punt() {
    local url="$1"

    local file=$(basename "$url")
    local variable=${file//-/_}_data; local value
    
    [[ -z ${!variable} ]] && {
        if value="$(curl --proto '=https' -sSf "$url")"; then
            eval "$variable=\"\$value\""
        else
            msg --error "Failed to transfer data from $url"
        fi
    }

    shift && [[ -n $@ ]] && punt $@
}

parse() {
    local command=$1

    case $command in
        install|uninstall|config)
            local ferry=$2

            if [[ $ferry == *" "* ]]; then
                msg --warning "Operation stopped: Program names must not contain spaces"
                return 1
            fi

            local ferry_data="$(
                curl --proto '=https' -sSf "$charon_raw_url/ferries/$ferry"
            )"
            local dock_data="$(
                cache_read "dock/$ferry"
            )"

            create_object $ferry "$abstract_ferry_data"
            create_object $ferry "$ferry_data"
            create_object $ferry "$dock_data"
        ;;
        --help|-h)
            curl --proto '=https' -sSf "$charon_raw_url/usage"
            return
        ;;
        *)
            msg --unknown-command "$command"
            return 1
        ;;
    esac

    case $command in
        install)
            local uninstall_data="$(
                type ${ferry}_uninstall | sed -n '2,$p'
            )"
            cache_write "dock/$ferry" "$uninstall_data"
        ;;
    esac

    case $command in
        install|uninstall|config)
            ${ferry}_${command}
            [ $? -ne 0 ] && {
                msg --warning "${action^} failed: charon $action $ferry"
                parse uninstall $ferry
            }

            shift 2 && [[ -n $@ ]] && parse $command $@
        ;;
    esac

    case $command in
        install)
            cache_write "all-programs" "$ferry"
        ;;
        uninstall)
            cache_delete "dock/$ferry"
            cache_delete "all-programs" $ferry
        ;;
    esac
}

main() {
    local charon_api_url="https://api.github.com/repos/skeletony007/charon/contents"
    local charon_raw_url="https://raw.githubusercontent.com/skeletony007/charon/main"
    local bash_utils_raw_url="https://raw.githubusercontent.com/skeletony007/bash-utils/main"
    local dotfiles_raw_url="https://raw.githubusercontent.com/skeletony007/.dotfiles/main"

    eval "$(
        curl --proto '=https' -sSf \
            "$charon_raw_url/colors" \
            "$charon_raw_url/messages" \
            "$bash_utils_raw_url/object/object" \
            "$bash_utils_raw_url/shell-functions/shell-functions"
    )"

    local gh_wrapper_data="$( \
        curl --proto '=https' -sSf "$charon_raw_url/punts/gh-wrapper"
    )"
    create_object charon "$gh_wrapper_data"
    
    local cache_data="$( \
        curl --proto '=https' -sSf "$charon_raw_url/cache"
    )"
    create_object cache "$cache_data" "$HOME/.charon"

    punt $( 
        charon_get_api_data download_url "$charon_api_url/punts"
    )

    parse $@
}

main $@


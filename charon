#!/bin/bash

msg() {
    local prefix; local message; local redirect

    case $1 in
        -e|--error)
            prefix="${RED}ERROR${NC}  "; message="$2"; redirect=">&2"; shift 2
            ;;
        -i|--info)
            prefix="${GREEN}INFO${NC}   "; message="$2"; shift 2
            ;;
        *)
            message="$1"; shift
            ;;
    esac

    eval "echo -e \"${prefix}${message}\" $redirect"; [[ -z $@ ]] || msg $@
}

secure_curl() {
    local url="$1"
    local exit_status=0

    curl --proto '=https' -sSf "$url"
    [ $? -eq 0 ] || msg -e "Failed to transfer data from ${YELLOW}$url${NC}"; \
                    exit_status=1

    shift && [[ -z $@ ]] && return $exit_status || secure_curl $@
}

eval_curl() {
    local url="$1"
    local exit_status=0

    local data="$(secure_curl "$url")"
    eval "$data"
    [ $? -eq 0 ] || msg -e "Failed to evaluate data from ${YELLOW}$url${NC}"; \
                    exit_status=1

    shift && [[ -z $@ ]] && return $exit_status || eval_curl $@
}

punt() {
    local url="$1"

    local file=$(basename "$url")
    local var=${file//-/_}_data
    
    declare "$var"="$(secure_curl "$url")"

    shift && [[ -z $@ ]] || punt $@
}

main() {
    action=$1

    case $action in
        install|uninstall|config)
            ferry=$2; shift 2
            ferry_data="$(secure_curl "$charon_raw_url/ferries/$ferry")"

            create_object $ferry "$abstract_ferry_data"
            create_object $ferry "$ferry_data"

            ${ferry}_${action}
            [ $? -eq 0 ] && msg "$action successful." \
                         || msg "$action unsuccessful."

            [[ -z $@ ]] || main $action $@
        ;;
        --help|-h)
            secure_curl "$charon_raw_url/usage"
        ;;
        *)
            msg "Invalid command or missing arguments. Use ${YELLOW}charon --help${NC} for usage instructions."
        ;;
    esac
}

charon_api_url="https://api.github.com/repos/skeletony007/charon/contents"
charon_raw_url="https://raw.githubusercontent.com/skeletony007/charon/main"
bash_utils_raw_url="https://raw.githubusercontent.com/skeletony007/bash-utils/main"
dotfiles_raw_url="https://raw.githubusercontent.com/skeletony007/.dotfiles/main"

eval_curl "$charon_raw_url/colors" \
          "$bash_utils_raw_url/object/object" \
          "$bash_utils_raw_url/shell-functions/shell-functions"

gh_wrapper_data="$(secure_curl "$charon_raw_url/punts/gh-wrapper")"
create_object charon "$gh_wrapper_data" skeletony007 charon

punt $(charon_get_api_data download_url "$charon_api_url/punts")

main $@


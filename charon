#!/bin/bash

msg() {
    local prefix; local message; local redirect

    case $1 in
        -e|--error)
            prefix="${RED}ERROR${NC}  "; message="$2"; redirect=">&2"; shift 2
            ;;
        -i|--info)
            prefix="${GREEN}INFO${NC}   "; message="$2"; shift 2
            ;;
        *)
            message="$1"; shift
            ;;
    esac

    eval "echo -e \"${prefix}${message}\" $redirect"; [ -z "$@" ] || msg $@
}

secure_curl() {
    local URL="$1"; shift

    if ! curl --proto '=https' -sSf "$URL"; then
        msg -e "Failed to transfer data from ${YELLOW}$URL${NC}"
        return 1
    fi

    [ -z $@ ] || secure_curl $@
}

eval_curl() {
    local URL="$1"; shift

    local data="$(secure_curl "$URL")"
    if ! eval "$data"; then
        msg -e "Failed to evaluate data from ${YELLOW}$URL${NC}"
        return 1
    fi

    [ -z $@ ] || eval_curl $@
}


charon_raw_url="https://raw.githubusercontent.com/skeletony007/charon/main"
bash_utils_raw_url="https://raw.githubusercontent.com/skeletony007/bash-utils/main"
dotfiles_raw_url="https://raw.githubusercontent.com/skeletony007/.dotfiles/main"

eval_curl "$charon_raw_url/colors" "$bash_utils_raw_url/object/object"

gh_wrapper_data="$(secure_curl "$charon_raw_url/punts/gh-wrapper")"

create_object charon "$gh_wrapper_data" "skeletony007" "charon"
charon_api_url="https://api.github.com/repos/skeletony007/charon/contents"
punts="$(charon_get_api_data "name" "$charon_api_url/punts")"
for punt in $punts; do
        data_url="$( \
            charon_get_api_data "download_url" "$charon_api_url/punts/$punt" \
        )"

        eval "${punt//-/_}_data=\"$(secure_curl "$data_url")\""
done

echo "$abstract_ferry_data"

main() {
    action=$1

    case $action in
        install|uninstall|config)
            ferry=$2; shift 2
            ferry_data="$(secure_curl "$charon_raw_url/ferries/$ferry")"

            create_object $ferry "$abstract_ferry_data"
            create_object $ferry "$ferry_data"

            ${ferry}_${action}
            [ $? -eq 0 ] && msg -i "$action successful" \
                         || msg -e "$action unsuccessful"

            [ -z $@ ] || main $action $@
        ;;
        --help|-h)
            secure_curl "$charon_raw_url/usage"
        ;;
        *)
            msg -e "Invalid command or missing arguments. Use ${YELLOW}charon --help${NC} for usage instructions."
        ;;
    esac
}

main $@


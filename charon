#!/bin/bash

eval "$(secure_curl 'https://raw.githubusercontent.com/skeletony007/charon/main/msg')"

cache() {
    local action="$1"
    local path="$HOME/.charon/$2"
    local data="$3"

    case "$action" in
        read)
            data="$(<"$file")" || exit 1
            echo "$data"
            ;;
        write)
            mkdir -p "$(dirname "$file")"
            touch "$file"
            if ! grep -q "^$data$" "$file"; then
                echo "$data" >> "$file" || exit 1
            fi
            ;;
        delete)
            [ -f "$file" ] || return
            if [ -n "$data" ]; then
                sed -i "" "/^$data\$/d" "$file" || exit 1
            else
                rm "$file" || exit 1
            fi
            ;;
        *)
            exit 1
            ;;
    esac
}

write_uninstall_script() {
    local ferry="$1"
    local uninstall_data
    
    uninstall_data="$(secure_curl "https://raw.githubusercontent.com/skeletony007/charon/main/ferries/$ferry-uninstall")" &&
    cache write "ferries/$ferry-uninstall" "$uninstall_data"
}

read_uninstall_script() {
    local ferry="$1"
    local uninstall_data

    uninstall_data="$(cache read "ferries/$ferry-uninstall")" &&
    echo "$uninstall_data"
}

update_installed() {
    local script="$1"
    local ferry="$2"

    if [ "$script" == 'install' ]; then
        cache write 'all_packages' "$ferry"
    elif [ "$script" == 'uninstall' ]; then
        cache delete 'all_packages' "$ferry"
    fi
}

is_installed() {
    local ferry="$1"

    cache read 'all-packages' | grep -q "^$ferry$"
}

main() {
    local script="$1"
    local ferry="$2"

    local data
    {
        [ "$script" == 'uninstall' ] && data="$(read_uninstall_script "$ferry")"
    } || {
        data="$(secure_curl "https://raw.githubusercontent.com/skeletony007/charon/main/ferries/$ferry-$script")"
    } || {
        msg --unknown-command "error getting data for ${script} ${ferry}"
        exit 1
    }

    [ "$script" == 'install' ] && write_uninstall_script "$ferry"

    (eval "$data") && update_installed "$script" "$ferry" || {
        msg --error "remote $script $ferry contains errors"

        [ "$script" == 'install' ] && {
            is_installed "$ferry" || main 'uninstall' "$ferry"
        }

        exit 1
    }

    shift 2 && [[ -n "$@" ]] && main "$script" "$@"
}

main "$@"

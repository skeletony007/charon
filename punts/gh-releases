#!/bin/bash

${obj}_init() {
    create_object ${obj} "$gh_wrapper_data"

    ${obj}_user="$1"
    ${obj}_repo="$2"

    if [[ ! "${${obj}_user}" =~ ^[[:alnum:]]+$ ]]; then
        msg -e "Invalid username input. Usernames must be alphanumeric."
        return 1
    fi
    
    if [[ ! "${${obj}_repo}" =~ ^[[:alnum:]]+$ ]]; then
        msg -e "Invalid repository input. Repository names must be alphanumeric."
        return 1
    fi

    local url_pattern="https://api.github.com/repos/%s/%s/releases/latest"

    ${obj}_url="$(printf "$url_pattern" "${${obj}_user}" "${${obj}_repo}")"
}

${obj}_get_download_urls() {
    [[ -z ${${obj}_download_urls} ]] && ${obj}_download_urls="$( \
        ${obj}_get_api_data browser_download_url "${${obj}_url}" \
    )"

    echo "${${obj}_download_urls}"
}

${obj}_get_download_url() {
    local asset_name="$1"

    local browser_download_urls="$(${obj}_get_download_urls)"
    local browser_download_url="$(echo "$browser_download_urls" | grep -E "/$asset_name$")"

    echo "$browser_download_url"
}

${obj}_get_asset_names() {
    [[ -z "${${obj}_asset_names}" ]] && ${obj}_asset_names="$( \
        basename "$(${obj}_get_download_urls)" \
    )"

    echo "${${obj}_asset_names}"
}

${obj}_get_remote_version() {
    [[ -z "${${obj}_remote_version}" ]] && ${obj}_remote_version="$( \
        ${obj}_get_api_data tag_name "${${obj}_url}" \
    )"

    echo "${${obj}_remote_version}"
}

${obj}_get_local_version() {
    msg -e "Not implemented: This method would get the local version of the program: Implemented in \`cli-program\` object"
    return 1
}

${obj}_is_latest() {
    local remote_version="$(${obj}_get_remote_version)"
    local local_version="$(${obj}_get_local_version)"

    [ "$local_version" == "$remote_version" ] && return 0 \
                                              || return 1
}

${obj}_download_asset() {
    ## Needs major overhaul.

    local asset_name="$1"
    local output="$2"

    local browser_download_url="$(${obj}_get_download_url "$asset_name")"

    curl -L -o "$output" "$browser_download_url"
}

${obj}_release_menu() {
    case "$(uname -s)" in
        "Darwin")
            local os_name="macos"
            ;;
        "Linux")
            local os_name="linux"
            ;;
        *)
            echo "Unsupported operating system"
            return 1
            ;;
    esac
    local arch_name="$(uname -m)"

    echo "Detected operating system: $os_name \nDetected architecture: $arch_name"

    local asset_names="$(${obj}_get_asset_names)"

    local release_names_with_arch_and_os="$(echo "$asset_names" | grep -Ei "$os_name.*$arch_name|$arch_name.*$os_name")"
    local release_names_with_arch_or_os="$(echo "$asset_names" | grep -Ei "$os_name|$arch_name")"

    local release_names=""
    if [[ ! "$release_names_with_arch_and_os" == "" ]]; then
        release_names="$release_names_with_arch_and_os"
    elif [[ ! "$release_names_with_arch_or_os" == "" ]]; then
        release_names="$release_names_with_arch_or_os"
    else
        release_names="$asset_names"
    fi

    local selected_release=""
    PS3="Select a release to download: "
    select release in $release_names; do
        if [[ -n "$release" ]]; then
            selected_release="$release"
            break
        else
            echo "Invalid selection, please choose a valid release."
        fi
    done

    echo "$selected_release"
}


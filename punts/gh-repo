#!/bin/bash

${obj}_init() {
    create_object ${obj} "$GH_WRAPPER_DATA"

    ${obj}_user="$1"
    ${obj}_repo="$2"
    ${obj}_branch="$3"

    [[ -z ${obj}_branch ]] && ${obj}_branch=main

    if [[ ! "${${obj}_user}" =~ ^[[:alnum:]]+$ ]]; then
        msg -e 'Invalid username. Usernames must be alphanumeric.'
        return 1
    fi
    
    if [[ ! "${${obj}_repo}" =~ ^[[:alnum:]]+$ ]]; then
        msg -e 'Invalid repository. Repository names must be alphanumeric.'
        return 1
    fi
}

${obj}__fill_url() {
    local url_pattern="$1"

    local user="${${obj}_user}"
    local repo="${${obj}_repo}"

    echo "$(printf "$url_pattern" "${${obj}_user}" "${${obj}_repo}")"
}

${obj}_get_file_download_urls() {
    local url=$1

    local regex='"download_url":[ ]*"([^"]*)"[^}]*"type":[ ]*"file"'

    local file_download_urls="$(
        ${obj}_get_api_data "$regex" "$url" 
    )"

    echo $file_download_urls
}

${obj}_get_file_data() {
    local url=$1

    local data="$(curl --proto '=https' -sSf "$url")"

    echo $data
}

${obj}_get_dir_urls() {
    local url=$1

    local regex='"url":[ ]*"([^"]*)"[^}]*"type":[ ]*"dir"'

    local dir_api_urls="$(
        ${obj}_get_api_data "$regex" "$url"
    )"
    
    echo $dir_api_urls
}

${obj}_download_dir {
    local url=$1
    local output=$2
    
    local file_download_urls="$(${obj}_get_file_urls "$url")"
    local dir_urls="$(${obj}_get_dir_urls "$url")"

    for file_download_url in $file_download_urls; do
    done
    for dir_url in $dir_urls; do
    done
}

${obj}_get_release_download_urls() {
    if [[ -z ${${obj}_release_download_urls} ]]; then
        local url="$(
            ${obj}__fill_url 'https://api.github.com/repos/%s/%s/releases/latest'
        )"

        ${obj}_release_download_urls="$(
            ${obj}_get_api_data "$url" '^"browser_download_url": "([^"]*)"$'
        )"
    fi

    echo "${${obj}_download_urls}"
}

${obj}_get_release_asset_names() {
    [[ -z "${${obj}_release_asset_names}" ]] && ${obj}_release_asset_names="$(
        basename "$(${obj}_get_release_download_urls)"
    )"

    echo "${${obj}_release_asset_names}"
}

${obj}_get_remote_version() {
    if [[ -z "${${obj}_remote_version}" ]]; then
        local url="$(
            ${obj}__fill_url "https://api.github.com/repos/%s/%s/releases/latest"
        )"

        ${obj}_remote_version="$(
            $(${obj}_get_api_data "$url" '^"tag_name": "([^"]*)"$')[1]
        )"
    fi

    echo "${${obj}_remote_version}"
}

${obj}_get_local_version() {
    msg -w "Not implemented: Returns the local version of the program"
}

${obj}_is_latest() {
    local remote_version="$(${obj}_get_remote_version)"
    local local_version="$(${obj}_get_local_version)"

    [ "$local_version" == "$remote_version" ] || return 1
}

${obj}_release_download_asset() {
    local asset_name="$1"
    local output="$2"

    local url="$(
        ${obj}__fill_url "https://github.com/%s/%s/releases/latest/download/$asset_name"
    )"

    curl --proto '=https' -# -L -o "$output" "$url"
}

${obj}_release_menu() {
    local os_name
    case "$(uname -s)" in
        "Darwin")
            os_name="macos"
            ;;
        "Linux")
            os_name="linux"
            ;;
        *)
            echo "Unsupported operating system"
            return 1
            ;;
    esac
    local arch_name="$(uname -m)"

    echo "Detected operating system: $os_name \nDetected architecture: $arch_name"

    local asset_names="$(${obj}_get_release_asset_names)"

    local asset_names_with_arch_and_os="$(
        echo "$asset_names" | grep -Ei "$os_name.*$arch_name|$arch_name.*$os_name"
    )"
    local asset_names_with_arch_or_os="$(
        echo "$asset_names" | grep -Ei "$os_name|$arch_name"
    )"

    if [[ ! "$asset_names_with_arch_and_os" == "" ]]; then
        asset_names="$asset_names_with_arch_and_os"
    elif [[ ! "$asset_names_with_arch_or_os" == "" ]]; then
        asset_names="$asset_names_with_arch_or_os"
    fi

    local selected_asset
    PS3="Select the asset to download: "
    select asset in $asset_names; do
        if [[ -n "$asset" ]]; then
            selected_asset="$asset"
            break
        else
            echo "Invalid selection, please choose a valid asset."
        fi
    done

    echo "$selected_asset"
}

